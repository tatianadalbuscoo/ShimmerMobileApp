<!--
    
    DataPage.xaml
    Displays real-time data from a Shimmer device (IMU/EXG) with configuration
    controls, parameter selection, and a live-updating chart.
    
-->


<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:skia="clr-namespace:SkiaSharp.Views.Maui.Controls;assembly=SkiaSharp.Views.Maui.Controls"
             x:Class="ShimmerInterface.Views.DataPage"
             BackgroundColor="{StaticResource PageBackground}">

    <!-- Root layout: content + modal busy overlay on top -->
    <Grid>

        <!-- 
        Main scrollable layout container. 
        Allows vertical scrolling of all controls and chart content.
        -->
        <ScrollView>
            <VerticalStackLayout Padding="20" Spacing="12">

                <!-- Section title -->
                <Label Text="Live Data from Your Shimmer Sensor"
                       Style="{StaticResource TitleLabel}" />

                <!-- Horizontal separator -->
                <BoxView HeightRequest="1"
                         BackgroundColor="{StaticResource Gray200}"
                         Margin="0,10" />

                <!-- Section title: Chart Configuration -->
                <Label Text="Chart Configuration"
                       Style="{StaticResource TitleLabel}" />

                <!-- Grid of parameter and chart options -->
                <Grid ColumnDefinitions="*, *"
                      RowDefinitions="Auto, Auto, Auto, Auto, Auto, Auto, Auto, Auto"
                      ColumnSpacing="10"
                      RowSpacing="10">

                    <!-- Parameter picker (bound to VM list + selection) -->
                    <Label Grid.Row="0" Grid.Column="0"
                           Text="Parameter:"
                           VerticalOptions="Center"
                           FontSize="16"
                           FontAttributes="Bold" />
                    <Picker Grid.Row="0" Grid.Column="1"
                            ItemsSource="{Binding AvailableParameters}"
                            SelectedItem="{Binding SelectedParameter}"
                            FontSize="16"
                            BackgroundColor="White" />

                    <!-- Live display of current chart mode computed by VM -->
                    <Label Grid.Row="1" Grid.Column="0"
                           Text="Chart Mode:"
                           VerticalOptions="Center"
                           FontSize="16"
                           FontAttributes="Bold" />
                    <Label Grid.Row="1" Grid.Column="1"
                       VerticalOptions="Center"
                       FontSize="16"
                       TextColor="{StaticResource Primary}"
                       Text="{Binding ChartModeLabel}" />


                    <!-- Auto Y toggles manual entries and triggers auto-range -->
                    <Label Grid.Row="2" Grid.Column="0"
                           Text="Auto Y-Axis:"
                           VerticalOptions="Center"
                           FontSize="16"
                           FontAttributes="Bold" />
                    <Switch Grid.Row="2" Grid.Column="1"
                            IsToggled="{Binding AutoYAxis}"
                            VerticalOptions="Center" />

                    <!-- Y Min (applied only when pressing Apply; disabled when Auto Y is ON) -->
                    <Label Grid.Row="3" Grid.Column="0"
                           Text="Y Min:"
                           VerticalOptions="Center"
                           FontSize="16"
                           FontAttributes="Bold" />
                    <Grid Grid.Row="3" Grid.Column="1"
                          ColumnDefinitions="*, Auto"
                          ColumnSpacing="8">
                        <Entry Grid.Column="0"
                               Text="{Binding YAxisMinText}"
                               Keyboard="Numeric"
                               FontSize="16"
                               BackgroundColor="White"
                               IsEnabled="{Binding IsYAxisManualEnabled}" />
                        <Button Grid.Column="1"
                                Text="✓"
                                WidthRequest="44"
                                HeightRequest="44"
                                Command="{Binding ApplyYMinCommand}"
                                IsEnabled="{Binding IsYAxisManualEnabled}" />
                    </Grid>

                    <!-- Y Max (applied only when pressing Apply; disabled when Auto Y is ON) -->
                    <Label Grid.Row="4" Grid.Column="0"
                           Text="Y Max:"
                           VerticalOptions="Center"
                           FontSize="16"
                           FontAttributes="Bold" />
                    <Grid Grid.Row="4" Grid.Column="1"
                          ColumnDefinitions="*, Auto"
                          ColumnSpacing="8">
                        <Entry Grid.Column="0"
                               Text="{Binding YAxisMaxText}"
                               Keyboard="Numeric"
                               FontSize="16"
                               BackgroundColor="White"
                               IsEnabled="{Binding IsYAxisManualEnabled}" />
                        <Button Grid.Column="1"
                                Text="✓"
                                WidthRequest="44"
                                HeightRequest="44"
                                Command="{Binding ApplyYMaxCommand}"
                                IsEnabled="{Binding IsYAxisManualEnabled}" />
                    </Grid>

                    <!-- Time window (seconds) -->
                    <Label Grid.Row="5" Grid.Column="0"
                           Text="Time Window (s):"
                           VerticalOptions="Center"
                           FontSize="16"
                           FontAttributes="Bold" />
                    <Entry Grid.Row="5" Grid.Column="1"
                           Text="{Binding TimeWindowSecondsText}"
                           Keyboard="Numeric"
                           FontSize="16"
                           BackgroundColor="White" />

                    <!-- X labels interval -->
                    <Label Grid.Row="6" Grid.Column="0"
                           Text="X Labels every (s):"
                           VerticalOptions="Center"
                           FontSize="16"
                           FontAttributes="Bold" />
                    <Entry Grid.Row="6" Grid.Column="1"
                           Text="{Binding XAxisLabelIntervalText}"
                           IsEnabled="{Binding IsXAxisLabelIntervalEnabled}"
                           Keyboard="Numeric"
                           FontSize="16"
                           BackgroundColor="White" />

                    <!-- Sampling rate applied via async command Apply -->
                    <Label Grid.Row="7" Grid.Column="0"
                           Text="Sampling Rate (Hz):"
                           VerticalOptions="Center"
                           FontSize="16"
                           FontAttributes="Bold" />
                    <Grid Grid.Row="7" Grid.Column="1"
                          ColumnDefinitions="*, Auto"
                          ColumnSpacing="8">
                        <Entry Grid.Column="0"
                               Text="{Binding SamplingRateText}"
                               Keyboard="Numeric"
                               ReturnType="Done"
                               BackgroundColor="White"
                               FontSize="16" />

                        <!-- Apply button triggers ApplySamplingRateCommand -->
                        <Button Grid.Column="1"
                                Text="✓"
                                WidthRequest="44"
                                HeightRequest="44"
                                Command="{Binding ApplySamplingRateCommand}" />
                    </Grid>

                </Grid>

                <!-- Toggle background grid on charts -->
                <HorizontalStackLayout Spacing="10" VerticalOptions="Center">
                    <Label Text="Show Grid" VerticalOptions="Center" FontSize="14" />
                    <Switch IsToggled="{Binding ShowGrid}" />
                </HorizontalStackLayout>

                <!-- Inline validation from VM (hidden when empty/null) -->
                <Label Text="{Binding ValidationMessage}"
                       TextColor="Red"
                       FontSize="14">
                    <Label.Triggers>
                        <DataTrigger TargetType="Label" Binding="{Binding ValidationMessage}" Value="">
                            <Setter Property="IsVisible" Value="False" />
                        </DataTrigger>
                        <DataTrigger TargetType="Label" Binding="{Binding ValidationMessage}" Value="{x:Null}">
                            <Setter Property="IsVisible" Value="False" />
                        </DataTrigger>
                    </Label.Triggers>
                </Label>

                <!-- Horizontal separator -->
                <BoxView HeightRequest="1"
                         BackgroundColor="{StaticResource Gray200}"
                         Margin="0,10" />

                <!-- Realtime chart area -->
                <Label Text="Real-time Chart"
                       Style="{StaticResource TitleLabel}" />

                <!-- Legend: visible normally (including Split), hidden only when there is a single series -->
                <StackLayout Orientation="Horizontal" HorizontalOptions="Center" Spacing="20">
                    <StackLayout.Triggers>
                        <!-- Hide legend if both Legend2Text and Legend3Text are empty strings -->
                        <MultiTrigger TargetType="StackLayout">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Legend2Text}" Value="" />
                                <BindingCondition Binding="{Binding Legend3Text}" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter Property="IsVisible" Value="False" />
                        </MultiTrigger>

                        <!-- Hide legend if both are null -->
                        <MultiTrigger TargetType="StackLayout">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Legend2Text}" Value="{x:Null}" />
                                <BindingCondition Binding="{Binding Legend3Text}" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="IsVisible" Value="False" />
                        </MultiTrigger>

                        <!-- Mixed cases (one empty, one null) still mean single series -->
                        <MultiTrigger TargetType="StackLayout">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Legend2Text}" Value="" />
                                <BindingCondition Binding="{Binding Legend3Text}" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="IsVisible" Value="False" />
                        </MultiTrigger>

                        <MultiTrigger TargetType="StackLayout">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Legend2Text}" Value="{x:Null}" />
                                <BindingCondition Binding="{Binding Legend3Text}" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter Property="IsVisible" Value="False" />
                        </MultiTrigger>
                    </StackLayout.Triggers>

                    <!-- Series chips mirror VM legend labels/colors -->
                    <HorizontalStackLayout Spacing="5">
                        <HorizontalStackLayout.Triggers>
                            <DataTrigger TargetType="HorizontalStackLayout" Binding="{Binding Legend1Text}" Value="">
                                <Setter Property="IsVisible" Value="False" />
                            </DataTrigger>
                            <DataTrigger TargetType="HorizontalStackLayout" Binding="{Binding Legend1Text}" Value="{x:Null}">
                                <Setter Property="IsVisible" Value="False" />
                            </DataTrigger>
                        </HorizontalStackLayout.Triggers>
                        <BoxView WidthRequest="20" HeightRequest="3" BackgroundColor="{Binding Legend1Color}" VerticalOptions="Center" />
                        <Label Text="{Binding Legend1Text}" FontSize="12" VerticalOptions="Center" />
                    </HorizontalStackLayout>

                    <HorizontalStackLayout Spacing="5">
                        <HorizontalStackLayout.Triggers>
                            <DataTrigger TargetType="HorizontalStackLayout" Binding="{Binding Legend2Text}" Value="">
                                <Setter Property="IsVisible" Value="False" />
                            </DataTrigger>
                            <DataTrigger TargetType="HorizontalStackLayout" Binding="{Binding Legend2Text}" Value="{x:Null}">
                                <Setter Property="IsVisible" Value="False" />
                            </DataTrigger>
                        </HorizontalStackLayout.Triggers>
                        <BoxView WidthRequest="20" HeightRequest="3" BackgroundColor="{Binding Legend2Color}" VerticalOptions="Center" />
                        <Label Text="{Binding Legend2Text}" FontSize="12" VerticalOptions="Center" />
                    </HorizontalStackLayout>

                    <HorizontalStackLayout Spacing="5">
                        <HorizontalStackLayout.Triggers>
                            <DataTrigger TargetType="HorizontalStackLayout" Binding="{Binding Legend3Text}" Value="">
                                <Setter Property="IsVisible" Value="False" />
                            </DataTrigger>
                            <DataTrigger TargetType="HorizontalStackLayout" Binding="{Binding Legend3Text}" Value="{x:Null}">
                                <Setter Property="IsVisible" Value="False" />
                            </DataTrigger>
                        </HorizontalStackLayout.Triggers>
                        <BoxView WidthRequest="20" HeightRequest="3" BackgroundColor="{Binding Legend3Color}" VerticalOptions="Center" />
                        <Label Text="{Binding Legend3Text}" FontSize="12" VerticalOptions="Center" />
                    </HorizontalStackLayout>
                </StackLayout>

                <!-- Unified chart (Multi). Hidden when Split is active -->
                <Border x:Name="UnifiedChartBorder"
                        BackgroundColor="White"
                        Stroke="{StaticResource Gray200}"
                        StrokeThickness="1"
                        Padding="5"
                        HeightRequest="300">
                    <Border.Triggers>
                        <DataTrigger TargetType="Border" Binding="{Binding ChartDisplayMode}" Value="Split">
                            <Setter Property="IsVisible" Value="False" />
                        </DataTrigger>
                    </Border.Triggers>

                    <!-- Skia canvas for unified view -->
                    <skia:SKCanvasView x:Name="canvasView"
                                       HeightRequest="290"
                                       PaintSurface="OnCanvasViewPaintSurface" />
                </Border>

                <!-- Split charts (X/Y/Z or EXG1/EXG2). Visible only in Split mode -->
                <VerticalStackLayout x:Name="SplitCharts"
                                     Spacing="10"
                                     IsVisible="False">
                    <VerticalStackLayout.Triggers>
                        <DataTrigger TargetType="VerticalStackLayout"
                                     Binding="{Binding ChartDisplayMode}" Value="Split">
                            <Setter Property="IsVisible" Value="True" />
                        </DataTrigger>
                    </VerticalStackLayout.Triggers>

                    <!-- X / EXG1 -->
                    <Border BackgroundColor="White"
                            Stroke="{StaticResource Gray200}"
                            StrokeThickness="1"
                            Padding="5"
                            HeightRequest="220">
                        <skia:SKCanvasView x:Name="canvasX"
                                           HeightRequest="210"
                                           PaintSurface="OnCanvasFirstPaintSurface" />
                    </Border>

                    <!-- Y / EXG2 -->
                    <Border BackgroundColor="White"
                            Stroke="{StaticResource Gray200}"
                            StrokeThickness="1"
                            Padding="5"
                            HeightRequest="220">
                        <skia:SKCanvasView x:Name="canvasY"
                                           HeightRequest="210"
                                           PaintSurface="OnCanvasSecondPaintSurface" />
                    </Border>

                    <!-- Z hidden when EXG split (only two channels) -->
                    <Border BackgroundColor="White"
                            Stroke="{StaticResource Gray200}"
                            StrokeThickness="1"
                            Padding="5"
                            HeightRequest="220">
                        <!-- Hide third chart when IsExgSplit = true -->
                        <Border.Triggers>
                            <DataTrigger TargetType="Border" Binding="{Binding IsExgSplit}" Value="True">
                                <Setter Property="IsVisible" Value="False" />
                            </DataTrigger>
                        </Border.Triggers>

                        <skia:SKCanvasView x:Name="canvasZ"
                                            HeightRequest="210"
                                            PaintSurface="OnCanvasThirdPaintSurface" />
                    </Border>
                </VerticalStackLayout>

                <!-- Read-only summary bound to VM state -->
                <Frame BackgroundColor="{StaticResource Gray100}"
                       Padding="15"
                       Margin="0,10">
                    <VerticalStackLayout>
                        <Label FontSize="20" FontAttributes="Bold" Margin="0,0,0,6">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="Current Parameter:  " TextColor="{StaticResource Primary}"/>
                                    <Span Text="{Binding YAxisLabel}" TextColor="Black"/>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>

                        <Label FontSize="16" Margin="0,0,0,2">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="Display Mode:  " TextColor="{StaticResource Primary}"/>
                                    <Span Text="{Binding ChartModeLabel}" TextColor="Black"/>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>

                        <Label FontSize="16" Margin="0,0,0,2">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="Measuring:  " TextColor="{StaticResource Primary}"/>
                                    <Span Text="{Binding YAxisLabel}" TextColor="Black"/>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>

                        <Label FontSize="16" Margin="0,0,0,2">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="Unit:  " TextColor="{StaticResource Primary}"/>
                                    <Span Text="{Binding YAxisUnit}" TextColor="Black"/>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>

                        <Label FontSize="16" Margin="0,0,0,2">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="Y Range: " TextColor="{StaticResource Primary}"/>
                                    <Span Text="{Binding YAxisMin}" TextColor="Black"/>
                                    <Span Text=" - " TextColor="Black"/>
                                    <Span Text="{Binding YAxisMax}" TextColor="Black"/>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>

                        <Label FontSize="16" Margin="0,0,0,2">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="Time Window:  " TextColor="{StaticResource Primary}"/>
                                    <Span Text="{Binding TimeWindowSeconds, StringFormat='{}{0}s'}" TextColor="Black"/>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>

                        <Label FontSize="16" Margin="0,0,0,2">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="X Labels every:  " TextColor="{StaticResource Primary}"/>
                                    <Span Text="{Binding XAxisLabelInterval, StringFormat='{}{0}s'}" TextColor="Black"/>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>

                        <!-- Mirrors actual applied rate (not just the text entry) -->
                        <Label FontSize="16" Margin="0,0,0,2">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="Sample Rate:  " TextColor="{StaticResource Primary}"/>
                                    <Span Text="{Binding SamplingRateDisplay, StringFormat='{}{0:F1} Hz'}" TextColor="Black"/>
                                    
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>

                        <Label FontSize="16" Margin="0,0,0,2">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="Show Grid:  " TextColor="{StaticResource Primary}"/>
                                    <Span Text="{Binding ShowGrid}" TextColor="Black"/>
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                    </VerticalStackLayout>
                </Frame>
            </VerticalStackLayout>
        </ScrollView>

        <!-- Busy overlay during long-running device ops (blocks input) -->
        <Grid x:Name="BusyOverlay"
              BackgroundColor="#80000000"
              IsVisible="False">
            <VerticalStackLayout HorizontalOptions="Center"
                                 VerticalOptions="Center"
                                 Spacing="12">
                <ActivityIndicator IsRunning="True"
                                   WidthRequest="48"
                                   HeightRequest="48"/>

                <!-- Text is set by VM events -->
                <Label x:Name="BusyLabel"
                       Text="Writing sampling rate to device… Please wait."
                       TextColor="White"
                       HorizontalTextAlignment="Center"
                       FontSize="16"/>
            </VerticalStackLayout>
        </Grid>
    </Grid>
</ContentPage>
